"""
Django settings for ydb_backend_tests project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import json
from pathlib import Path

# pip install yandexcloud
# pip install ydb
# pip install ydb-dbapi
# pip install social-auth-core
# pip install social-auth-app-django
# pip install django-rest-framework
# pip install djangorestframework
# pip install markdown       # Markdown support for the browsable API.
# pip install django-crispy-forms
# pip install PyJWT
# pip install pytz
# pip install gunicorn
#
# pip install yandex-cloud-ml-sdk
# pip install sqlparse==0.2.4

# git clone https://github.com/encode/django-rest-framework

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@%-idju$=*h9b#^)ai183%2)d(#ya*rydc3*&ol-&9jhhpx(wi'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

LOCALHOST = True

if LOCALHOST:
    ALLOWED_HOSTS = []   
else:
    ALLOWED_HOSTS = ["https://angey60meteo.ru"] 


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'WiFiMeteoStation_Web',
    # apps
    'apps.sensors.apps.SensorsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'WiFiMeteoStation_Web.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'),],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ]
}

WSGI_APPLICATION = 'WiFiMeteoStation_Web.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

#os.environ["YDB_ACCESS_TOKEN_CREDENTIALS"] = "t1.9"

os.environ["YDB_NAME"] = "ydb239s"
#os.environ["YDB_ENGINE"] = "ydbBackend.backend"
os.environ["YDB_ENGINE"] = "ydb_backend.backend"
os.environ["YDB_PROTOCOL"] = "grpcs"
os.environ["YDB_HOST"] = "ydb.serverless.yandexcloud.net"
#os.environ["YDB_HOST"] = "grpcs://ydb.serverless.yandexcloud.net"
os.environ["YDB_PORT"] = "2135"
os.environ["YDB_DATABASE"] = "/ru-central1/b1ghqolluv992uu4cf45/etni9kfd05r4hlmli4ld"


with open('authorized_key.json') as f:
    key_json = json.load(f)

id = key_json.get("id", None)
service_account_id = key_json.get("service_account_id", None)
created_at = key_json.get("created_at", None)
key_algorithm = key_json.get("key_algorithm", None)
public_key = key_json.get("public_key", None)
private_key = key_json.get("private_key", None)

my_dict = {
    'id': id,
    'service_account_id': service_account_id,
    'created_at': created_at,
    'key_algorithm': key_algorithm,
    'public_key': public_key,
    'private_key': private_key,
}

my_dict_sa = {
    'service_account_json': my_dict,
}

my_dict_token = {
    "token": os.getenv("YDB_ACCESS_TOKEN_CREDENTIALS")
}

#'''
DATABASES = {
    "default": {
        "NAME": os.getenv('YDB_NAME'),
        "ENGINE": os.getenv('YDB_ENGINE'),
        "PROTOCOL": os.getenv('YDB_PROTOCOL'),
        "HOST": os.getenv('YDB_HOST'),
        "PORT": os.getenv('YDB_PORT'),
        "DATABASE": os.getenv('YDB_DATABASE'),
        "CREDENTIALS": my_dict_sa,
    }
}
#'''

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATICFILES_DIRS = (
    'static',
)
#STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

if LOCALHOST:
    STATIC_URL = "static/"
else:
    STATIC_URL = "esp8266meteo/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
